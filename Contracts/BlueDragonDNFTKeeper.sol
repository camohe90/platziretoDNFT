// SPDX-License-Identifier: MIT
pragma solidity 0.8.6;

import "@chainlink/contracts/src/v0.8/KeeperCompatible.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/utils/Counters.sol";

contract NFTDinamic is ERC721, ERC721URIStorage, KeeperCompatibleInterface {
    using Counters for Counters.Counter;

    Counters.Counter public tokenIdCounter;

    // Metadata information for each stage of the NFT on IPFS.
    string[] IpfsUri = [
            "https://gateway.pinata.cloud/ipfs/QmTyf3WE89ezETCcrZpRvTaF1zjyUhwXP4fqC3tkCNn9jr",
            "https://gateway.pinata.cloud/ipfs/QmSiZ4XE9an72QdmaHfmFMJ3TxjZUmXHCLFkCzXTiZY2EL",
            "https://gateway.pinata.cloud/ipfs/Qmeh1GwaygAhDediixrkrwRVDdkpxmrjnX13MNXTrt1hPj"
        ];

    uint256 lastTimeStamp;
    uint256 interval;

    constructor(uint256 _interval) ERC721("BlueDragon", "BLD") {
        interval = _interval;
        lastTimeStamp = block.timestamp;
    }
    function checkUpkeep(bytes calldata /* checkData */) external view override returns (bool upkeepNeeded, bytes memory /* performData */) {
        uint256 tokenId = tokenIdCounter.current() - 1;
        bool done;
        if (numberStage(tokenId) >= 2) {
            done = true;
        }
        upkeepNeeded = !done && ((block.timestamp - lastTimeStamp) > interval);
    }

    function performUpkeep(bytes calldata /* performData */) external override {
        if ((block.timestamp - lastTimeStamp) > interval) {
            lastTimeStamp = block.timestamp;
            uint256 tokenId = tokenIdCounter.current() - 1;
            changeNumber(tokenId);
        }
        // We don't use the performData in this example. The performData is generated by the Keeper's call to your checkUpkeep function
    }

    function safeMint(address to) public {
        uint256 tokenId = tokenIdCounter.current();
        tokenIdCounter.increment();
        _safeMint(to, tokenId);
        _setTokenURI(tokenId, IpfsUri[0]);
    }

    function changeNumber(uint256 _tokenId) public {
        if (numberStage(_tokenId) >= 2) {
            return;
        }
        // Get the current number and add 1
        uint256 newVal = numberStage(_tokenId) + 1;
        // store the new URI
        string memory newUri = IpfsUri[newVal];
        // Update the URI
        _setTokenURI(_tokenId, newUri);
    }

    // determine the stage of number
    function numberStage(uint256 _tokenId) public view returns (uint256) {
        string memory _uri = tokenURI(_tokenId);
        if (compareStrings(_uri, IpfsUri[0])) { // Dragon 1
            return 0;
        }
        if (compareStrings(_uri, IpfsUri[1])) { // Dragon 2
            return 1;
        }
        // Dragon 3
        return 2;
    }

    // helper function to compare strings
    function compareStrings(string memory a, string memory b) public pure returns (bool) {
        return (keccak256(abi.encodePacked((a))) ==
            keccak256(abi.encodePacked((b))));
    }

    // The following functions is an override required by Solidity.
    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {
        super._burn(tokenId);
    }

    // The following functions is an override required by Solidity.
    function tokenURI(uint256 tokenId) public view override(ERC721, ERC721URIStorage) returns (string memory) {
        return super.tokenURI(tokenId);
    }
}