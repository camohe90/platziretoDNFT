// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
//Added the keeper compatible 
import "@chainlink/contracts/src/v0.8/KeeperCompatible.sol";

contract NFTPlatzi2 is ERC721, ERC721URIStorage, Ownable, KeeperCompatibleInterface  {
    using Counters for Counters.Counter;
    string[] uriData = [
    "https://gateway.pinata.cloud/ipfs/QmdkXwtLqFXXqBsUW5Pe7UmikGdFyYLYdEegMnpufNiJPo",
    "https://gateway.pinata.cloud/ipfs/QmRCxq4hUN3PDW2wJdByjEp5zq9iNd4wBxNQah5PoSMF6c",
    "https://gateway.pinata.cloud/ipfs/QmX9VYKrUtR8RxcWFkHk6StyBEEHjXBmYFycs5Ka4m6nyC"
    ];

    //added state variables for the keepers functions
    uint interval;
    uint lastTimeStamp;

    Counters.Counter private _tokenIdCounter;

    constructor(uint _interval) ERC721("NFTPLATZI", "PLTZ") {
        //the user has to initialize the value for intervals
        //the lasTimeStamp deppends of global variable, means current timestamp in seconds
        interval = _interval;
        lastTimeStamp = block.timestamp;
    }

     function checkUpkeep(bytes calldata /* checkData */) external view override returns (bool upkeepNeeded, bytes memory /* performData */) {
        //upKeepedNeeded is boolean that trigger performUpKeep
        upkeepNeeded = (block.timestamp - lastTimeStamp) > interval;
        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.
    }

    function performUpkeep(bytes calldata /* performData */) external override {
        //We highly recommend revalidating the upkeep in the performUpkeep function
        if ((block.timestamp - lastTimeStamp) > interval ) {
            lastTimeStamp = block.timestamp;
            changeData(0);
        }
        // We don't use the performData in this example. The performData is generated by the Keeper's call to your checkUpkeep function
    }

    function safeMint(address to) public onlyOwner {
        uint256 tokenId = _tokenIdCounter.current();
        _tokenIdCounter.increment();
        _safeMint(to, tokenId);
        _setTokenURI(tokenId, uriData[0]);
    }

    function changeData(uint _tokenId)public {
        _setTokenURI(_tokenId, uriData[1]);
    }

    // function changeData(uint _tokenId) public {
    //     if(statusData(_tokenId) >= 4) {return;}
    //     uint newData = statusData(_tokenId) + 1;
    //     string memory newUri = uriData[newData];
    //     _setTokenURI(_tokenId, newUri);
    // }

    // function statusData(uint _tokenId) public view returns (string memory) {
    //     string memory _uri = tokenURI(_tokenId);
    //     for (uint i = 0; i < uriData.length; i++) {
    //         if(uriData[i] == _uri) {
    //             return i;
    //         }
    //     }
    //     return _uri;
    // }

    // The following functions are overrides required by Solidity.
    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {
        super._burn(tokenId);
    }

    function tokenURI(uint256 tokenId)
        public
        view
        override(ERC721, ERC721URIStorage)
        returns (string memory)
    {
        return super.tokenURI(tokenId);
    }
}