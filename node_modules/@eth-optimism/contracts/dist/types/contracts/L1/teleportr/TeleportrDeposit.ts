/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface TeleportrDepositInterface extends utils.Interface {
  functions: {
    "maxBalance()": FunctionFragment;
    "maxDepositAmount()": FunctionFragment;
    "minDepositAmount()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setMaxAmount(uint256)": FunctionFragment;
    "setMaxBalance(uint256)": FunctionFragment;
    "setMinAmount(uint256)": FunctionFragment;
    "totalDeposits()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawBalance()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "maxBalance"
      | "maxDepositAmount"
      | "minDepositAmount"
      | "owner"
      | "renounceOwnership"
      | "setMaxAmount"
      | "setMaxBalance"
      | "setMinAmount"
      | "totalDeposits"
      | "transferOwnership"
      | "withdrawBalance"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "maxBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxDepositAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minDepositAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxBalance",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDeposits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBalance",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "maxBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBalance",
    data: BytesLike
  ): Result;

  events: {
    "BalanceWithdrawn(address,uint256)": EventFragment;
    "EtherReceived(uint256,address,uint256)": EventFragment;
    "MaxBalanceSet(uint256,uint256)": EventFragment;
    "MaxDepositAmountSet(uint256,uint256)": EventFragment;
    "MinDepositAmountSet(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BalanceWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EtherReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxBalanceSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxDepositAmountSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinDepositAmountSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface BalanceWithdrawnEventObject {
  owner: string;
  balance: BigNumber;
}
export type BalanceWithdrawnEvent = TypedEvent<
  [string, BigNumber],
  BalanceWithdrawnEventObject
>;

export type BalanceWithdrawnEventFilter =
  TypedEventFilter<BalanceWithdrawnEvent>;

export interface EtherReceivedEventObject {
  depositId: BigNumber;
  emitter: string;
  amount: BigNumber;
}
export type EtherReceivedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  EtherReceivedEventObject
>;

export type EtherReceivedEventFilter = TypedEventFilter<EtherReceivedEvent>;

export interface MaxBalanceSetEventObject {
  previousBalance: BigNumber;
  newBalance: BigNumber;
}
export type MaxBalanceSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  MaxBalanceSetEventObject
>;

export type MaxBalanceSetEventFilter = TypedEventFilter<MaxBalanceSetEvent>;

export interface MaxDepositAmountSetEventObject {
  previousAmount: BigNumber;
  newAmount: BigNumber;
}
export type MaxDepositAmountSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  MaxDepositAmountSetEventObject
>;

export type MaxDepositAmountSetEventFilter =
  TypedEventFilter<MaxDepositAmountSetEvent>;

export interface MinDepositAmountSetEventObject {
  previousAmount: BigNumber;
  newAmount: BigNumber;
}
export type MinDepositAmountSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  MinDepositAmountSetEventObject
>;

export type MinDepositAmountSetEventFilter =
  TypedEventFilter<MinDepositAmountSetEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TeleportrDeposit extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TeleportrDepositInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    maxBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxDepositAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    minDepositAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxAmount(
      _maxDepositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxBalance(
      _maxBalance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinAmount(
      _minDepositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalDeposits(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawBalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  maxBalance(overrides?: CallOverrides): Promise<BigNumber>;

  maxDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

  minDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxAmount(
    _maxDepositAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxBalance(
    _maxBalance: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinAmount(
    _minDepositAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalDeposits(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawBalance(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    maxBalance(overrides?: CallOverrides): Promise<BigNumber>;

    maxDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setMaxAmount(
      _maxDepositAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxBalance(
      _maxBalance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinAmount(
      _minDepositAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawBalance(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "BalanceWithdrawn(address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      balance?: null
    ): BalanceWithdrawnEventFilter;
    BalanceWithdrawn(
      owner?: PromiseOrValue<string> | null,
      balance?: null
    ): BalanceWithdrawnEventFilter;

    "EtherReceived(uint256,address,uint256)"(
      depositId?: PromiseOrValue<BigNumberish> | null,
      emitter?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): EtherReceivedEventFilter;
    EtherReceived(
      depositId?: PromiseOrValue<BigNumberish> | null,
      emitter?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): EtherReceivedEventFilter;

    "MaxBalanceSet(uint256,uint256)"(
      previousBalance?: null,
      newBalance?: null
    ): MaxBalanceSetEventFilter;
    MaxBalanceSet(
      previousBalance?: null,
      newBalance?: null
    ): MaxBalanceSetEventFilter;

    "MaxDepositAmountSet(uint256,uint256)"(
      previousAmount?: null,
      newAmount?: null
    ): MaxDepositAmountSetEventFilter;
    MaxDepositAmountSet(
      previousAmount?: null,
      newAmount?: null
    ): MaxDepositAmountSetEventFilter;

    "MinDepositAmountSet(uint256,uint256)"(
      previousAmount?: null,
      newAmount?: null
    ): MinDepositAmountSetEventFilter;
    MinDepositAmountSet(
      previousAmount?: null,
      newAmount?: null
    ): MinDepositAmountSetEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    maxBalance(overrides?: CallOverrides): Promise<BigNumber>;

    maxDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxAmount(
      _maxDepositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxBalance(
      _maxBalance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinAmount(
      _minDepositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawBalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    maxBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxDepositAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minDepositAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxAmount(
      _maxDepositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxBalance(
      _maxBalance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinAmount(
      _minDepositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalDeposits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawBalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
