//Begin

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "@chainlink/contracts/src/v0.8/KeeperCompatible.sol";
import "@openzeppelin/contracts@4.6.0/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts@4.6.0/utils/Counters.sol";

contract MyPokemons is ERC721, ERC721URIStorage, KeeperCompatibleInterface {
    using Counters for Counters.Counter;

    Counters.Counter public _tokenIdCounter;

    string[] IpfsUri = [
    "https://gateway.pinata.cloud/ipfs/QmS1X5FV1wDJFeotMNFasPcHPjq4UDDWn4q6wjVgfziTmA",
    "https://gateway.pinata.cloud/ipfs/QmUEQixXHRta5poJh8hsEHaXj6JMWHKVENQEPadxJtVNxx",
    "https://gateway.pinata.cloud/ipfs/QmU3wEvcjs7LB6sNGYEJH8qgWxgkYUXcW6HicCoaVedzm9",
    "https://gateway.pinata.cloud/ipfs/QmSt7zv5rDZoTLUaVsdvPe65pMj3a4ytB7xQ55KorngnPB", 
    "https://gateway.pinata.cloud/ipfs/QmdHJzVQgaf9CcsgxEJDbGfUBQfiagNJNsrgEnfRWkTj8Z"
    ];

  
    uint256 lastTimeStamp;
    uint256 interval;

    constructor(uint _interval) ERC721("myPokemons", "PKM") {
        interval = _interval;
        lastTimeStamp = block.timestamp;
    }

    function checkUpkeep(bytes calldata /* checkData */) external view override returns (bool upkeepNeeded, bytes memory /* performData */) {
        uint256 tokenId = _tokenIdCounter.current() - 1;
        bool done;
        if (pokemonStage(tokenId) >= 2) {
            done = true;
        }
        upkeepNeeded = !done && ((block.timestamp - lastTimeStamp) > interval);        
        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.
    }

    function performUpkeep(bytes calldata /* performData */) external override {
        //We highly recommend revalidating the upkeep in the performUpkeep function
        if ((block.timestamp - lastTimeStamp) > interval ) {
            lastTimeStamp = block.timestamp;            
            uint256 tokenId = _tokenIdCounter.current() - 1;
            growPokemon(tokenId);
        }
        // We don't use the performData in this example. The performData is generated by the Keeper's call to your checkUpkeep function
    }

    function safeMint(address to) public {
        uint256 tokenId = _tokenIdCounter.current();
        _tokenIdCounter.increment();
        _safeMint(to, tokenId);
        _setTokenURI(tokenId, IpfsUri[0]);
    }

    function growPokemon(uint256 _tokenId) public {
        if( pokemonStage(_tokenId) >= 2){return;}
        // Get the current stage of the flower and add 1
        uint256 newVal = pokemonStage(_tokenId) + 1;
        // store the new URI
        string memory newUri = IpfsUri[newVal];
        // Update the URI
        _setTokenURI(_tokenId, newUri);
    }

    // determine the stage of the pokemon
    function pokemonStage(uint256 _tokenId) public view returns (uint256) {
        string memory _uri = tokenURI(_tokenId);
        // Pokeball
        if (compareStrings(_uri, IpfsUri[0])) {
            return 0;
        }
        // Charmander
        if (
            compareStrings(_uri, IpfsUri[1]) 
        ) {
            return 1;
        }
        // Charmeleon
        if (compareStrings(_uri, IpfsUri[2])) {
            return 2;
        }
        // Charizard
        if (compareStrings(_uri, IpfsUri[3])) {
            return 3;
        }
        // fighting Charizard
        return 4;
    }

    // helper function to compare strings
    function compareStrings(string memory a, string memory b)
        public
        pure
        returns (bool)
    {
        return (keccak256(abi.encodePacked((a))) ==
            keccak256(abi.encodePacked((b))));
    }


    // The following functions are overrides required by Solidity.

    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {
        super._burn(tokenId);
    }

    function tokenURI(uint256 tokenId)
        public
        view
        override(ERC721, ERC721URIStorage)
        returns (string memory)
    {
        return super.tokenURI(tokenId);
    }
}



//End
