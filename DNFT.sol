// SPDX-License-Identifier: MIT
pragma solidity ^0.8.6;

import "@chainlink/contracts/src/v0.8/KeeperCompatible.sol";
import "@openzeppelin/contracts@4.6.0/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts@4.6.0/utils/Counters.sol";

contract HumanEvolution is ERC721, ERC721URIStorage, KeeperCompatibleInterface {
    using Counters for Counters.Counter;

    Counters.Counter public tokenIdCounter;
 
    // Metadata for each stage
    string[] pinataUri = [
        "https://gateway.pinata.cloud/ipfs/QmZaGnWYwVS1b76bhM2KWCHDjoDxL7T7vtx55F1Rm3K8iH",
        "https://gateway.pinata.cloud/ipfs/Qme7G44qLBQuLVhFcCpq2HQ2XDft4Zo7Naz7p2WXbbf3sf",
        "https://gateway.pinata.cloud/ipfs/QmQYNa6f6H1xtqZFuSkUdyiroyuFzZwx7j7n95gPYzzrv1",
        "https://gateway.pinata.cloud/ipfs/QmWriibNt2cCnYm5hXaY9qpvjRhqGRawdkuwWsE2t49oBU",
        "https://gateway.pinata.cloud/ipfs/QmUMnuh3Du8igMgX1xWkSs1DKV8kA1mQED2KzEy6XnneB9"
    ]; 

    uint256 lastTimeStamp;
    uint256 interval;

    constructor(uint _interval) ERC721("Human Evolution", "EVO") {
        interval = _interval;
        lastTimeStamp = block.timestamp;
    }

    function checkUpkeep(bytes calldata /* checkData */) external view override returns (bool upkeepNeeded, bytes memory /* performData */) {
        uint256 tokenId = tokenIdCounter.current() - 1;
        bool done;
        if (evolutioStage(tokenId) >= 4) {
            done = true;
        }

        upkeepNeeded = !done && ((block.timestamp - lastTimeStamp) > interval);        
        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.
    }

    function performUpkeep(bytes calldata /* performData */) external override {
        //We highly recommend revalidating the upkeep in the performUpkeep function
        if ((block.timestamp - lastTimeStamp) > interval ) {
            lastTimeStamp = block.timestamp;            
            uint256 tokenId = tokenIdCounter.current() - 1;
            evolutioStage(tokenId);
        }
        // We don't use the performData in this example. The performData is generated by the Keeper's call to your checkUpkeep function
    }

    function safeMint(address to) public {
        uint256 tokenId = tokenIdCounter.current();
        tokenIdCounter.increment();
        _safeMint(to, tokenId);
        _setTokenURI(tokenId, pinataUri[0]);
    }

    function safeBurn(uint256 _tokenId) public {
        _burn(_tokenId);
    }

    function evolution(uint256 _tokenId) public {
        if(evolutioStage(_tokenId) >= 4){
            return;
        }
        // Get the current stage and add 1
        uint256 newVal = evolutioStage(_tokenId) + 1;
        // store the new URI
        string memory newUri = pinataUri[newVal];
        // Update the URI
        _setTokenURI(_tokenId, newUri);
    }

    // determine the stage 
    function evolutioStage(uint256 _tokenId) public view returns (uint256) {
        string memory _uri = tokenURI(_tokenId);
        if (compareStrings(_uri, pinataUri[0])) {
            return 0;
        }
        if (compareStrings(_uri, pinataUri[1])) {
            return 1;
        }
        if (compareStrings(_uri, pinataUri[2])) {
            return 2;
        }
        if (compareStrings(_uri, pinataUri[3])) {
            return 3;
        }
        return 4;
    }

    function compareStrings(string memory a, string memory b) public pure
        returns (bool) {
        return (keccak256(abi.encodePacked((a))) == 
            keccak256(abi.encodePacked((b))));
    }

    // The following function is an override required by Solidity.
    function _burn(uint256 tokenId) internal
        override(ERC721, ERC721URIStorage) {
        super._burn(tokenId);
    }

    // The following function is an override required by Solidity.
    function tokenURI(uint256 tokenId) public view
        override(ERC721, ERC721URIStorage)
        returns (string memory) {
        return super.tokenURI(tokenId);
    }
}