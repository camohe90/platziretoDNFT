//Begin
// SPDX-License-Identifier: MIT
pragma solidity 0.8.6;

import "@chainlink/contracts/src/v0.8/KeeperCompatible.sol";
import "@openzeppelin/contracts@4.6.0/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts@4.6.0/utils/Counters.sol";

contract MonarchButterflyNFT is ERC721, ERC721URIStorage, KeeperCompatibleInterface {
    using Counters for Counters.Counter;

    Counters.Counter public tokenIdCounter;
 
    // Metadata information for each stage of the NFT on IPFS.
    string[] private pinataUri = [
        "https://gateway.pinata.cloud/ipfs/QmWN6aN6hah8cgEn4WyxUNrdtcc7nQrQb9Xjh1Wssg6v1M",
        "https://gateway.pinata.cloud/ipfs/Qmd8Yss7nM9K46A1auy54BQ6ZDFW8h7tXND7SpepnfhR7s",
        "https://gateway.pinata.cloud/ipfs/QmUegtmLm3TBy6GhLWiyNKEacLpBjEJDgQ179jpggpGceJ",
        "https://gateway.pinata.cloud/ipfs/QmWGvXfWJafgtqNUunHD7KSHgFxgSLvM17E2QMhrToy6yc",
        "https://gateway.pinata.cloud/ipfs/QmY6Gjxvzp5mfAeSRdwDmNtKe2ukstVYHk2RtwVQefbQJb"
    ];

    uint256 lastTimeStamp;
    uint256 interval;

    constructor(uint _interval) ERC721("Monarch Butterfly", "MNBF") {
        interval = _interval;
        lastTimeStamp = block.timestamp;
    }

    function checkUpkeep(bytes calldata /* checkData */) external view override returns (bool upkeepNeeded, bytes memory /* performData */) {
        uint256 tokenId = tokenIdCounter.current() - 1;
        bool done;
        if (monarchButterflyStage(tokenId) >= 4) {
            done = true;
        }

        upkeepNeeded = !done && ((block.timestamp - lastTimeStamp) > interval);        
        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.
    }

    function performUpkeep(bytes calldata /* performData */) external override {
        //We highly recommend revalidating the upkeep in the performUpkeep function
        if ((block.timestamp - lastTimeStamp) > interval) {
            lastTimeStamp = block.timestamp;            
            uint256 tokenId = tokenIdCounter.current() - 1;
            transformButterfly(tokenId);
        }
        // We don't use the performData in this example. The performData is generated by the Keeper's call to your checkUpkeep function
    }

    function safeMint(address to) public {
        uint256 tokenId = tokenIdCounter.current();
        tokenIdCounter.increment();
        _safeMint(to, tokenId);
        _setTokenURI(tokenId, pinataUri[0]);
    }

    function transformButterfly(uint256 _tokenId) public {
        if(monarchButterflyStage(_tokenId) >= 4){return;}
        // Get the current stage of the Butterfly and add 1
        uint256 newVal = monarchButterflyStage(_tokenId) + 1;
        // store the new URI
        string memory newUri = pinataUri[newVal];
        // Update the URI
        _setTokenURI(_tokenId, newUri);
    }

    // Determine the stage of the Butterfly growth
    function monarchButterflyStage(uint256 _tokenId) public view returns (uint256) {
        string memory _uri = tokenURI(_tokenId);
        // Egg
        if (compareStrings(_uri, pinataUri[0])) {
            return 0;
        }
        // Larva
        if (compareStrings(_uri, pinataUri[1])) {
            return 1;
        }
        // Caterpillar
        if (compareStrings(_uri, pinataUri[2])) {
            return 2;
        }
        // Chrysalis
        if (compareStrings(_uri, pinataUri[3])) {
            return 3;
        }
        // Must be an Adult Butterfly
        return 4;
    }

    // Helper function to compare strings
    function compareStrings(string memory a, string memory b) public pure returns (bool) {
        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));
    }

    // The following function is an override required by Solidity.
    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {
        super._burn(tokenId);
    }

    // The following function is an override required by Solidity.
    function tokenURI(uint256 tokenId) public view override(ERC721, ERC721URIStorage) returns (string memory) {
        return super.tokenURI(tokenId);
    }
}
//End
