//Begin
// SPDX-License-Identifier: MIT
pragma solidity 0.8.6;

import "@chainlink/contracts/src/v0.8/KeeperCompatible.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/utils/Counters.sol";

contract keeperChrist is ERC721, ERC721URIStorage, KeeperCompatibleInterface {
    using Counters for Counters.Counter;

    Counters.Counter public tokenIdCounter;
 
   // Metadata information for each stage of the NFT on IPFS.
    string[] IpfsUri = [
        "https://ipfs.io/ipfs/QmRpBMKLPhWqb3gVwGZw94sv4cLMseRbEW5siFWBmiaCPE",
        "https://ipfs.io/ipfs/QmPdzx1AnUfoRxngEmS3B1qCBLTNauHSGQwjQC7xKraCBv",
        "https://ipfs.io/ipfs/QmeTkcuwQcggVvcEfTY4E8KCXYy7u3XxqM2sQezDwUE4BZ",
        "https://ipfs.io/ipfs/QmcJgi2jSqDx24sXyKFKpNxcYtvsFPdT5E5cygUq89xeSj",
        "https://ipfs.io/ipfs/QmT75wAWmL9Lagrumkk2qQduGGtxAeU4LojiFUth9wgvxQ",
        "https://ipfs.io/ipfs/QmUZqaoVYc58x7hQzXZFR5ufoKHvY5943ZHjgY7v3EdY5b",
        "https://ipfs.io/ipfs/Qma95D8VvHWDDiz8oKscy14QdmiuhBMXuwHnNWvm5Gcq9T",
        "https://ipfs.io/ipfs/QmfUtGkgS8FkP97fuZt7EB44S5tDZGGRiNdST9Wm6aQ2Ds",
        "https://ipfs.io/ipfs/Qmbb8AR5mKT5XEUMjLJMigWSkMLzxNbeNAKFNgHVEAz48T",
        "https://ipfs.io/ipfs/QmcyUMsLC2M3SNXZcujH9jM3F2YSeDRAVqsp7eCTezRzoJ",
        "https://ipfs.io/ipfs/QmaYqKiBusdzUT5jEGaLVd8SuAoronDta7mCmEq6LVz47F",
        "https://ipfs.io/ipfs/QmQs7cMWdQVnkTgerovQmnE1H6gA9vwnhCue4V72uV6mZ7",
        "https://ipfs.io/ipfs/QmTM2a428QURGzuKfx33xHEgHCovHjWfAkaj9FR9E2aWXV",
        "https://ipfs.io/ipfs/QmfSgQyNtZJLWojbfi24wCfyueSLTNPpfAB7EAkLsJ2eLE",
        "https://ipfs.io/ipfs/QmbpRdrBfuSJNyUEHU6NoDdHexwTFxVgLY9iStonrY84zw"
    ]; 

    uint256 lastTimeStamp;
    uint256 interval;

    constructor(uint _interval) ERC721("Way of the Cross", "JCHRIST") {
        interval = _interval;
        lastTimeStamp = block.timestamp;
    }

    function checkUpkeep(bytes calldata /* checkData */) external view override returns (bool upkeepNeeded, bytes memory /* performData */) {
        uint256 tokenId = tokenIdCounter.current() - 1;
        bool done;
        if (stationStage(tokenId) >= 14) {
            done = true;
        }

        upkeepNeeded = !done && ((block.timestamp - lastTimeStamp) > interval);        
        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.
    }

    function performUpkeep(bytes calldata /* performData */) external override {
        //We highly recommend revalidating the upkeep in the performUpkeep function
        if ((block.timestamp - lastTimeStamp) > interval ) {
            lastTimeStamp = block.timestamp;            
            uint256 tokenId = tokenIdCounter.current() - 1;
            changeStation(tokenId);
        }
        // We don't use the performData in this example. The performData is generated by the Keeper's call to your checkUpkeep function
    }

    function safeMint(address to) public {
        uint256 tokenId = tokenIdCounter.current();
        tokenIdCounter.increment();
        _safeMint(to, tokenId);
        _setTokenURI(tokenId, IpfsUri[0]);
    }

    function changeStation(uint256 _tokenId) public {
        if(stationStage(_tokenId) >= 14){return;}
        // Get the current stage of the station and add 1
        uint256 newVal = stationStage(_tokenId) + 1;
        // store the new URI
        string memory newUri = IpfsUri[newVal];
        // Update the URI
        _setTokenURI(_tokenId, newUri);
    }

    // determine the stage of the station
    function stationStage(uint256 _tokenId) public view returns (uint256) {
        string memory _uri = tokenURI(_tokenId);
        // First Station
        if (compareStrings(_uri, IpfsUri[0])) {
            return 0;
        }
        // Second Station
        if (
            compareStrings(_uri, IpfsUri[1]) 
        ) {
            return 1;
        }
        // Third Station
        if (
            compareStrings(_uri, IpfsUri[2]) 
        ) {
            return 2;
        }
        // Fourth Station
        if (
            compareStrings(_uri, IpfsUri[3]) 
        ) {
            return 3;
        }
        // Fifth Station
        if (
            compareStrings(_uri, IpfsUri[4]) 
        ) {
            return 4;
        }
        // Sixth Station
        if (
            compareStrings(_uri, IpfsUri[5]) 
        ) {
            return 5;
        }
        // Seventh Station
        if (
            compareStrings(_uri, IpfsUri[6]) 
        ) {
            return 6;
        }
        // Eighth Station
        if (
            compareStrings(_uri, IpfsUri[7]) 
        ) {
            return 7;
        }
        // Ninth Station
        if (
            compareStrings(_uri, IpfsUri[8]) 
        ) {
            return 8;
        }
        // Tenth Station
        if (
            compareStrings(_uri, IpfsUri[9]) 
        ) {
            return 9;
        }
        // Eleventh Station
        if (
            compareStrings(_uri, IpfsUri[10]) 
        ) {
            return 10;
        }
        // Twelfth Station
        if (
            compareStrings(_uri, IpfsUri[11]) 
        ) {
            return 11;
        }
        // Thirteenth Station
        if (
            compareStrings(_uri, IpfsUri[12]) 
        ) {
            return 12;
        }
        // Fourteenth Station
        if (
            compareStrings(_uri, IpfsUri[13]) 
        ) {
            return 13;
        }
        // Resurrection
        return 14;
    }

    // helper function to compare strings
    function compareStrings(string memory a, string memory b)
        public
        pure
        returns (bool)
    {
        return (keccak256(abi.encodePacked((a))) ==
            keccak256(abi.encodePacked((b))));
    }

    // The following functions is an override required by Solidity.
    function _burn(uint256 tokenId)
        internal
        override(ERC721, ERC721URIStorage)
    {
        super._burn(tokenId);
    }

    // The following functions is an override required by Solidity.
    function tokenURI(uint256 tokenId)
        public
        view
        override(ERC721, ERC721URIStorage)
        returns (string memory)
    {
        return super.tokenURI(tokenId);
    }
}
//End
