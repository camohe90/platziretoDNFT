// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

import "@openzeppelin/contracts@4.7.2/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts@4.7.2/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts@4.7.2/access/Ownable.sol";
import "@openzeppelin/contracts@4.7.2/utils/Counters.sol";

import "@chainlink/contracts/src/v0.8/KeeperCompatible.sol";

contract NFTPLATZI is ERC721, ERC721URIStorage, Ownable, KeeperCompatibleInterface {
    using Counters for Counters.Counter;

    Counters.Counter private _tokenIdCounter;
    Counters.Counter private _indexCounter;

    string[] uriData = ["https://gateway.pinata.cloud/ipfs/QmQrzxt1fvzoR6J91FTe58dd8Dg79CfPmPKhzhkDZKS1xP",
    "https://gateway.pinata.cloud/ipfs/QmQyEs13w12KSEhiSNHeH7LbYQ9o4na9UHWgwZAD1oNBHg",
    "https://gateway.pinata.cloud/ipfs/Qmdu6Gf83TAbyyPcZz6VrDnoeiHTXvgYJEa5t22DFYcQ74"];

    uint interval;
    uint lastTimeStamp;

    constructor(uint _updateInterval) ERC721("NFTPLATZI", "PTLZ") {
        interval = _updateInterval;
        lastTimeStamp = block.timestamp;
    }

    function checkUpkeep(bytes calldata /* checkData */) external view override returns (bool upkeepNeeded, bytes memory /* performData */) {
        uint256 tokenId = _tokenIdCounter.current() - 1;
        bool keeperFalse;
        if (tokenId >= 2) {
            keeperFalse = true;
        }
        upkeepNeeded = !keeperFalse && (block.timestamp - lastTimeStamp) > interval;
        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.
    }

    function performUpkeep(bytes calldata /* performData */) external override {
        //We highly recommend revalidating the upkeep in the performUpkeep function

        if ((block.timestamp - lastTimeStamp) > interval ) {
            lastTimeStamp = block.timestamp;
            uint256 tokenId = _tokenIdCounter.current() -1;
            changeData(tokenId);

        }
        // We don't use the performData in this example. The performData is generated by the Keeper's call to your checkUpkeep function
    }

    function safeMint(address to) public onlyOwner {
        uint256 tokenId = _tokenIdCounter.current();
        _tokenIdCounter.increment();
        _safeMint(to, tokenId);
        _setTokenURI(tokenId, uriData[0]);
    }

    function changeData(uint _tokenId) public {
        _indexCounter.increment();
        uint256 indexId = _indexCounter.current();
        _setTokenURI(_tokenId, uriData[indexId]);
        
    }

    // The following functions are overrides required by Solidity.

    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {
        super._burn(tokenId);
    }

    function tokenURI(uint256 tokenId)
        public
        view
        override(ERC721, ERC721URIStorage)
        returns (string memory)
    {
        return super.tokenURI(tokenId);
    }
}
